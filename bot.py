import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from threading import Thread
from datetime import datetime, timedelta
import schedule
import time
from configs.config import BOT_TOKEN
from storage.models import (
    create_user,
    subject_already_exists,
    add_subject,
    get_subjects_by_user,
    set_foreign_status,
    get_all_reminders_by_user,
    delete_deadline,
    add_deadline,
    get_deadlines_by_subject,
    is_user_registered,
    DeadlineType,
    Deadline,
    Subject,
    Session
)

bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}

#
##
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("–ü—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã"),
        KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—á–µ–±–Ω—ã—Ö –ø–∞—Ä–∞—Ö"),
        KeyboardButton("–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        KeyboardButton("F.A.Q. –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"),
        KeyboardButton("–£–µ–∑–∂–∞—é –Ω–∞ –∫–∞–Ω–∏–∫—É–ª—ã")
    )
    return markup
##
#

#
##
@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
def handle_show_subjects_with_deadlines(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id = message.chat.id
    subjects = get_subjects_by_user(telegram_id)

    if not subjects:
        bot.send_message(telegram_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        return

    response = "–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
    for subject in subjects:
        response += f"üìö {subject.name}\n"
        deadlines = get_deadlines_by_subject(subject.id)
        if deadlines:
            for deadline in deadlines:
                due_date = datetime.strptime(deadline.due_date, "%Y-%m-%d").strftime("%d.%m.%Y")
                response += f"   üî∏ {deadline.name} (–¢–∏–ø: {deadline.deadline_type.value}, –î–∞—Ç–∞: {due_date})\n"
        else:
            response += "   üîπ –ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
        response += "\n"

    bot.send_message(telegram_id, response)
##
#

#
##
def subjects_keyboard(subjects):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.
    """
    markup = InlineKeyboardMarkup()
    for subject in subjects:
        markup.add(InlineKeyboardButton(subject.name, callback_data=f"subject_{subject.id}"))
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="add_subject"))
    return markup

def deadlines_keyboard(subject_id, deadlines):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞.
    """
    markup = InlineKeyboardMarkup()
    for deadline in deadlines:
        markup.add(
            InlineKeyboardButton(
                f"{deadline.name} ({deadline.deadline_type.value})",
                callback_data=f"deadline_{deadline.id}"
            ),
            InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"delete_{deadline.id}")
        )
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data=f"add_deadline_{subject_id}"))
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="back_to_subjects"))
    return markup
##
#

#
##
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã")
def handle_notifications_menu(message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ '–ü—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã'.
    """
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"),
        KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç"),
        KeyboardButton("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        KeyboardButton("–ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
def show_subjects_menu(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id = message.chat.id
    subjects = get_subjects_by_user(telegram_id)
    if not subjects:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç"), KeyboardButton("–ù–∞–∑–∞–¥"))
        bot.send_message(telegram_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π?", reply_markup=markup)
    else:
        bot.send_message(telegram_id, "–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=subjects_keyboard(subjects))
##
#

#
##
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç")
def handle_add_subject_message(message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é.
    """
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    bot.register_next_step_handler(message, finish_add_subject)

def finish_add_subject(message):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.
    """
    telegram_id = message.chat.id
    subject_name = message.text
    if subject_already_exists(telegram_id, subject_name):
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        handle_add_subject_message(message)
        return
    add_subject(telegram_id, subject_name)
    bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    show_subjects_menu(message)

##
#

#
##
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def handle_back_to_main_menu(message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
##
#

#
##
@bot.message_handler(func=lambda message: message.text == "F.A.Q. –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
def handle_faq(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–π–¥ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    """
    faq_text = (
        "üìò *F.A.Q. –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤*\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *LMS-Buddy*! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é –∏ –∫–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "1Ô∏è‚É£ *–ú–æ—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞*\n"
        "   - –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã.\n"
        "   - –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏: –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Ö –∏ –æ—Ç–º–µ—á–∞–π—Ç–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.\n"
        "   - –ö–æ–º–∞–Ω–¥–∞ '–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n\n"
        "2Ô∏è‚É£ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—á–µ–±–Ω—ã—Ö –ø–∞—Ä–∞—Ö*\n"
        "   - –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö –ø–∞—Ä.\n"
        "   - –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∏ —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ –Ω–∏—Ö.\n\n"
        "3Ô∏è‚É£ *–£–µ–∑–∂–∞—é –Ω–∞ –∫–∞–Ω–∏–∫—É–ª—ã*\n"
        "   - –°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, –µ—Å–ª–∏ –≤—ã —É–µ–∑–∂–∞–µ—Ç–µ –Ω–∞ –∫–∞–Ω–∏–∫—É–ª—ã.\n"
        "   - –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
        "4Ô∏è‚É£ *–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n"
        "   - –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –°–û–ü–∞.\n\n"
        "5Ô∏è‚É£ *F.A.Q. –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤*\n"
        "   - –ß–∏—Ç–∞–π—Ç–µ —ç—Ç–æ—Ç –≥–∞–π–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —É—á–µ–±–Ω—ã–π –æ—Ñ–∏—Å. –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä"
    )
    bot.send_message(message.chat.id, faq_text, parse_mode="Markdown")
##
#

#
##
@bot.callback_query_handler(func=lambda call: call.data.startswith("subject_"))
def show_deadlines(call):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.
    """
    subject_id = int(call.data.split("_")[1])
    deadlines = get_deadlines_by_subject(subject_id)
    bot.edit_message_text(
        "–í–∞—à–∏ –¥–µ–¥–ª–∞–π–Ω—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=deadlines_keyboard(subject_id, deadlines)
    )

##
#

#
##
@bot.callback_query_handler(func=lambda call: call.data == "add_subject")
def handle_add_subject_callback(call):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    bot.register_next_step_handler(call.message, finish_add_subject)

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_deadline_"))
def handle_add_deadline(call):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.
    """
    subject_id = int(call.data.split("_")[2])
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:")
    bot.register_next_step_handler(call.message, lambda msg: ask_deadline_type(msg, subject_id))

def ask_deadline_type(message, subject_id):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –¥–µ–¥–ª–∞–π–Ω–∞.
    """
    deadline_name = message.text
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–µ–¥–ª–∞–π–Ω–∞ (exam, homework, project):"
    )
    bot.register_next_step_handler(message, lambda msg: ask_deadline_date(msg, subject_id, deadline_name))

def ask_deadline_date(message, subject_id, deadline_name):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞.
    """
    try:
        deadline_type = DeadlineType(message.text.lower())
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY:"
        )
        bot.register_next_step_handler(message, lambda msg: finish_add_deadline(msg, subject_id, deadline_name, deadline_type))
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–¥–ª–∞–π–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_add_deadline(message)

def finish_add_deadline(message, subject_id, deadline_name, deadline_type):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞.
    """
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        add_deadline(subject_id, deadline_name, deadline_type, due_date.strftime("%Y-%m-%d"))
        bot.send_message(message.chat.id, f"–î–µ–¥–ª–∞–π–Ω '{deadline_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {due_date.strftime('%d.%m.%Y')}. –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ 3 –¥–Ω—è –∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –Ω–µ–≥–æ!")
        show_subjects_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_add_deadline(message)
##
#
    
#
##
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete_deadline(call):
    """
    –£–¥–∞–ª—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω –ø–æ ID.
    """
    deadline_id = int(call.data.split("_")[1])
    delete_deadline(deadline_id)
    bot.answer_callback_query(call.id, "–î–µ–¥–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    bot.edit_message_text(
        "–î–µ–¥–ª–∞–π–Ω —É–¥–∞–ª—ë–Ω.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    show_subjects_menu(call.message)
##
#

#
##
@bot.callback_query_handler(func=lambda call: call.data == "back_to_subjects")
def handle_back_to_subjects(call):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    """
    telegram_id = call.message.chat.id
    subjects = get_subjects_by_user(telegram_id)
    bot.edit_message_text(
        "–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=subjects_keyboard(subjects)
    )
##
#

#
##
def notifications_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –¥–∞—Ç—É"),
        KeyboardButton("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        KeyboardButton("–ù–∞–∑–∞–¥")
    )
    return markup
##
#

#
##
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    """
    telegram_id = message.chat.id

    user_exists = is_user_registered(telegram_id)

    if user_exists:
        bot.send_message(telegram_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ LMS-Buddy!", reply_markup=main_menu())
    else:
        bot.send_message(
            telegram_id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LMS-Buddy! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        user_data[telegram_id] = {}
        bot.register_next_step_handler(message, ask_surname)

def ask_surname(message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id = message.chat.id
    user_data[telegram_id]['name'] = message.text
    bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(message, ask_family_name)

def ask_family_name(message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id = message.chat.id
    user_data[telegram_id]['surname'] = message.text
    bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    bot.register_next_step_handler(message, finish_registration)

def finish_registration(message):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.
    """
    telegram_id = message.chat.id
    user_data[telegram_id]['family_name'] = message.text

    create_user(
        telegram_id=telegram_id,
        name=user_data[telegram_id]['name'],
        surname=user_data[telegram_id]['surname'],
        family_name=user_data[telegram_id]['family_name']
    )
    bot.send_message(
        telegram_id,
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
        reply_markup=main_menu()
    )
##
#

#
##
@bot.message_handler(func=lambda message: message.text == "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def handle_show_all_reminders(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º,
    –∞ —Ç–∞–∫–∂–µ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –°–û–ü–µ.
    """
    telegram_id = message.chat.id
    response = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    subjects = get_subjects_by_user(telegram_id)
    if not subjects:
        response += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n\n"
    else:
        response += "–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
        for subject in subjects:
            response += f"üìö {subject.name}\n"
            deadlines = get_deadlines_by_subject(subject.id)
            if deadlines:
                for deadline in deadlines:
                    due_date = datetime.strptime(deadline.due_date, "%Y-%m-%d").strftime("%d.%m.%Y")
                    response += f"   üî∏ {deadline.name} (–¢–∏–ø: {deadline.deadline_type.value}, –î–∞—Ç–∞: {due_date})\n"
            else:
                response += "   üîπ –ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
            response += "\n"
    response += "–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –°–û–ü–µ:\n"

    today = datetime.now().date()
    sop_periods = [
        (datetime(2024, 10, 8).date(), datetime(2024, 10, 24).date()),
        (datetime(2024, 11, 29).date(), datetime(2024, 12, 19).date()),
        (datetime(2025, 2, 17).date(), datetime(2025, 3, 3).date()),
        (datetime(2025, 5, 30).date(), datetime(2025, 6, 19).date())
    ]

    upcoming_sop = None
    for start, end in sop_periods:
        if today <= end:
            upcoming_sop = (start, end)
            break

    if upcoming_sop:
        start, end = upcoming_sop
        response += f"   üîπ –° {start.strftime('%d.%m.%Y')} –ø–æ {end.strftime('%d.%m.%Y')}\n"
    else:
        response += "   üîπ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –°–û–ü–æ–≤.\n"

    bot.send_message(telegram_id, response)
def handle_show_reminders(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id = message.chat.id
    reminders = get_all_reminders_by_user(telegram_id)

    if not reminders:
        bot.send_message(telegram_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        return

    response = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" + "\n\n".join(reminders)
    bot.send_message(telegram_id, response)
##
#

#
##
@bot.message_handler(func=lambda message: True)
def menu_handler(message):
    chat_id = message.chat.id

    if message.text == "–ú–æ—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=notifications_menu())
        user_data[chat_id] = {'state': 'notifications_menu'}

    elif message.text == "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        handle_show_reminders(message)

    elif message.text == "–í–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –¥–∞—Ç—É":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
        user_data[chat_id]['state'] = 'enter_subject'

    elif user_data.get(chat_id, {}).get('state') == 'enter_subject':
        user_data[chat_id]['subject'] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY:")
        user_data[chat_id]['state'] = 'enter_date'

    elif user_data.get(chat_id, {}).get('state') == 'enter_date':
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y")
            user_data[chat_id]['date'] = date
            user_data[chat_id]['state'] = None
            add_subject(chat_id, user_data[chat_id]['subject'])
            bot.send_message(
                chat_id,
                f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –ø—Ä–µ–¥–º–µ—Ç {user_data[chat_id]['subject']}, –¥–∞—Ç–∞ —Å–¥–∞—á–∏ {date.strftime('%d.%m.%Y')}. –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é, –∑–∞ 3 –¥–Ω—è, –∑–∞ 2 –¥–Ω—è –∏ –∑–∞ 1 –¥–µ–Ω—å!",
                reply_markup=main_menu()
            )
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (—Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY).")

    elif message.text == "–£–µ–∑–∂–∞—é –Ω–∞ –∫–∞–Ω–∏–∫—É–ª—ã":
        bot.send_message(chat_id, "–í—ã —É–µ–∑–∂–∞–µ—Ç–µ –Ω–∞ –∫–∞–Ω–∏–∫—É–ª—ã? –û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, handle_foreign_status)

    elif message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        user_data[chat_id]['state'] = None

    else:
        bot.send_message(chat_id, f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '{message.text}' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu())
##
#
#
##
def handle_foreign_status(message):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "–ö–æ–≥–¥–∞ –≤—ã –≤–µ—Ä–Ω—ë—Ç–µ—Å—å? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(message, lambda msg: save_return_date(msg, True))
    elif message.text.lower() == "–Ω–µ—Ç":
        set_foreign_status(message.chat.id, is_foreign=False)
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º –¥–ª—è –ø–æ–º–æ—â–∏.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, handle_foreign_status)

def save_return_date(message, is_foreign):
    try:
        return_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        set_foreign_status(message.chat.id, is_foreign=is_foreign, return_date=return_date)
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ! –ñ–¥—ë–º –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è {return_date}.", reply_markup=main_menu())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, lambda msg: save_return_date(msg, is_foreign))
##
#

#
##
def send_notifications():
    today = datetime.now().date()
    for chat_id, data in user_data.items():
        if 'date' in data and 'subject' in data:
            exam_date = data['date'].date()

            if exam_date - timedelta(days=7) == today:
                bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —Å–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {data['subject']}.")
            elif exam_date - timedelta(days=3) == today:
                bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ 3 –¥–Ω—è —Å–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {data['subject']}.")
            elif exam_date - timedelta(days=2) == today:
                bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ 2 –¥–Ω—è —Å–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {data['subject']}.")
            elif exam_date - timedelta(days=1) == today:
                bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–≤—Ç—Ä–∞ —Å–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {data['subject']}.")
            elif exam_date == today:
                bot.send_message(chat_id, f"–°–µ–≥–æ–¥–Ω—è —Å–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {data['subject']}! –£–¥–∞—á–∏!")

def remind_sop_dates():
    today = datetime.now().date()
    sop_periods = [
        (datetime(2024, 10, 8).date(), datetime(2024, 10, 24).date()),
        (datetime(2024, 11, 29).date(), datetime(2024, 12, 19).date()),
        (datetime(2025, 2, 17).date(), datetime(2025, 3, 3).date()),
        (datetime(2025, 5, 30).date(), datetime(2025, 6, 19).date())
    ]
    for start, end in sop_periods:
        if start <= today <= end:
            for chat_id in user_data.keys():
                bot.send_message(chat_id, "–°–û–ü –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.")

from sqlalchemy.orm import joinedload

def send_deadline_reminders():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è –∏ –∑–∞ 1 –¥–µ–Ω—å.
    """
    today = datetime.now().date()
    session = Session()

    deadlines = session.query(Deadline).options(
        joinedload(Deadline.subject).joinedload(Subject.user)
    ).all()

    for deadline in deadlines:
        due_date = datetime.strptime(deadline.due_date, "%Y-%m-%d").date()
        days_left = (due_date - today).days

        if days_left == 3:
            bot.send_message(
                deadline.subject.user.telegram_id,
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 3 –¥–Ω—è –¥–µ–¥–ª–∞–π–Ω '{deadline.name}' –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{deadline.subject.name}'."
            )
        elif days_left == 1:
            bot.send_message(
                deadline.subject.user.telegram_id,
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω '{deadline.name}' –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{deadline.subject.name}'."
            )
    session.close()

def schedule_notifications():
    schedule.every().day.at("08:00").do(send_notifications)
    schedule.every().monday.at("10:00").do(remind_sop_dates)
    schedule.every().day.at("08:00").do(send_deadline_reminders)
    while True:
        schedule.run_pending()
        time.sleep(1)

##
#

if __name__ == "__main__":
    notification_thread = Thread(target=schedule_notifications)
    notification_thread.daemon = True
    notification_thread.start()

    bot.infinity_polling()
