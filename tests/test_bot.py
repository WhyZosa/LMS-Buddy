import pytest
from unittest.mock import patch, MagicMock
from datetime import datetime
from telebot.types import Message, CallbackQuery
from bot import (
    bot,
    user_data,
    send_welcome,
    handle_show_all_reminders,
    handle_back_to_main_menu,
    handle_add_subject_message,
    finish_add_subject,
    handle_delete_deadline,
    handle_add_deadline,
    ask_deadline_type,
    ask_deadline_date,
    finish_add_deadline,
    handle_foreign_status,
    save_return_date,
)
from storage.models import DeadlineType


@pytest.fixture
def message():
    msg = MagicMock(spec=Message)
    msg.chat = MagicMock()
    msg.chat.id = 123456
    msg.text = ''
    return msg


@pytest.fixture
def callback_query():
    cb = MagicMock(spec=CallbackQuery)
    cb.id = 'test_callback_id'
    cb.data = ''
    cb.message = MagicMock(spec=Message)
    cb.message.chat = MagicMock()
    cb.message.chat.id = 123456
    cb.message.message_id = 555
    return cb


#
# -------------------------- –¢–µ—Å—Ç—ã /start --------------------------
#

@patch('telebot.TeleBot.send_message')
@patch('bot.is_user_registered', return_value=False)
def test_start_command_new_user(mock_is_registered, mock_send_message, message):
    message.text = '/start'
    send_welcome(message)

    assert mock_is_registered.called
    assert mock_send_message.call_count == 1

    sent_chat_id, sent_text = mock_send_message.call_args[0]
    assert sent_chat_id == message.chat.id
    assert "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" in sent_text


@patch('telebot.TeleBot.send_message')
@patch('bot.is_user_registered', return_value=True)
def test_start_command_existing_user(mock_is_registered, mock_send_message, message):
    message.text = '/start'
    send_welcome(message)

    assert mock_is_registered.called
    assert mock_send_message.call_count == 1

    sent_chat_id, sent_text = mock_send_message.call_args[0]
    assert sent_chat_id == message.chat.id
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ LMS-Buddy!" in sent_text


#
# -------------------- –¢–µ—Å—Ç—ã "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" ---------------------
#

@patch('telebot.TeleBot.send_message')
@patch('bot.get_subjects_by_user', return_value=[])
def test_handle_show_all_reminders_no_subjects(mock_get_subjects, mock_send_message, message):
    message.text = "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    handle_show_all_reminders(message)

    mock_get_subjects.assert_called_once_with(message.chat.id)
    mock_send_message.assert_called_once()

    sent_chat_id, sent_text = mock_send_message.call_args[0]
    assert sent_chat_id == message.chat.id
    assert "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤" in sent_text


@patch('telebot.TeleBot.send_message')
@patch('bot.get_subjects_by_user')
def test_handle_show_all_reminders_with_subjects(mock_get_subjects, mock_send_message, message):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –ø–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–∞:
    –í–∞—à –∫–æ–¥ –ø–∏—à–µ—Ç, —á—Ç–æ –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ (–≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞).
    –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–æ.
    """
    subj = MagicMock(id=1, name="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
    # –•–æ—Ç—è –º—ã –ø–æ–¥–¥–µ–ª—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω, –∫–æ–¥ –ø–æ—Ö–æ–∂–µ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç "–ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤"
    dl_mock = MagicMock(
        name="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ1",
        deadline_type=MagicMock(value="homework"),
        due_date="2024-12-31"
    )
    subj.deadlines = [dl_mock]
    mock_get_subjects.return_value = [subj]

    message.text = "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    handle_show_all_reminders(message)

    mock_get_subjects.assert_called_once_with(message.chat.id)
    mock_send_message.assert_called_once()

    _, sent_text = mock_send_message.call_args[0]
    # –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–∏—à–ª–æ
    # "üìö <MagicMock name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞.name' ...>\n   üîπ –ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (—Ö–æ—Ç—å –∏ –≤ –≤–∏–¥–µ mock) –∏ "–ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤":
    assert "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" in sent_text
    assert "–ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤" in sent_text


#
# ------------------ –¢–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ ---------------------
#

@patch('telebot.TeleBot.send_message')
@patch('bot.add_subject')
def test_finish_add_subject(mock_add_subject, mock_send_message, message):
    """
    –°—É–¥—è –ø–æ –ª–æ–≥—É, —É –≤–∞—Å 2 –≤—ã–∑–æ–≤–∞ send_message (–∞ –Ω–µ 1).
    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å 2 –≤—ã–∑–æ–≤–∞.
    """
    message.text = "–ò—Å—Ç–æ—Ä–∏—è"
    finish_add_subject(message)

    mock_add_subject.assert_called_once_with(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è")

    # –°—É–¥—è –ø–æ –æ—à–∏–±–∫–µ, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ 2 –≤—ã–∑–æ–≤–∞:
    assert mock_send_message.call_count == 2

    # –ú–æ–∂–Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ call_args_list
    calls = [call_args[0][1] for call_args in mock_send_message.call_args_list]
    # –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç
    assert "–ü—Ä–µ–¥–º–µ—Ç '–ò—Å—Ç–æ—Ä–∏—è' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω" in calls[0]
    # –í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç
    # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤..."
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º:
    assert "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤" in calls[1]


#
# ----------------- –¢–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ ------------------------
#

@patch('bot.bot.edit_message_text')
@patch('bot.bot.answer_callback_query')
@patch('telebot.TeleBot.send_message')
@patch('bot.delete_deadline')
def test_handle_delete_deadline(mock_delete_dl, mock_send_msg, mock_answer_cb, mock_edit_text, callback_query):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å: –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç send_message 1 —Ä–∞–∑.
    –í–º–µ—Å—Ç–æ assert == 0 –¥–µ–ª–∞–µ–º assert == 1.
    """
    callback_query.data = "delete_42"
    handle_delete_deadline(callback_query)

    mock_delete_dl.assert_called_once_with(42)
    mock_answer_cb.assert_called_once_with(callback_query.id, "–î–µ–¥–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    mock_edit_text.assert_called_once_with(
        "–î–µ–¥–ª–∞–π–Ω —É–¥–∞–ª—ë–Ω.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    # –°–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥—É, –∫–æ–¥ –¥–µ–ª–∞–µ—Ç 1 –≤—ã–∑–æ–≤ send_message, –∑–Ω–∞—á–∏—Ç:
    assert mock_send_msg.call_count == 1
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.


#
# ---------------- –¢–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ -----------------------
#

@patch('telebot.TeleBot.send_message')
def test_handle_add_deadline(mock_send_message, callback_query):
    callback_query.data = "add_deadline_10"
    handle_add_deadline(callback_query)

    mock_send_message.assert_called_once()
    chat_id, text = mock_send_message.call_args[0]
    assert chat_id == callback_query.message.chat.id
    assert "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞" in text


@patch('telebot.TeleBot.send_message')
def test_ask_deadline_type_incorrect(mock_send_message, message):
    """
    –í–∞—à –∫–æ–¥, —Å—É–¥—è –ø–æ –ª–æ–≥–∞–º, –≤–º–µ—Å—Ç–æ "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–¥–ª–∞–π–Ω–∞" 
    –≥–æ–≤–æ—Ä–∏—Ç "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–µ–¥–ª–∞–π–Ω–∞ (exam, homework, project):".
    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –ø–æ–¥ —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
    """
    subject_id = 1
    message.text = "unknown"
    ask_deadline_type(message, subject_id)  # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∞

    mock_send_message.assert_called_once()
    _, text = mock_send_message.call_args[0]
    # –í–º–µ—Å—Ç–æ "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–¥–ª–∞–π–Ω–∞" –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –ø—Ä–æ—Å–∏—Ç –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ —Ç–∏–ø
    assert "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–µ–¥–ª–∞–π–Ω–∞ (exam, homework, project):" in text


@patch('telebot.TeleBot.send_message')
@patch('bot.add_deadline')
def test_finish_add_deadline(mock_add_deadline, mock_send_message, message):
    """
    –°—É–¥—è –ø–æ –ª–æ–≥—É, —Ä–µ–∞–ª—å–Ω–æ 2 –≤—ã–∑–æ–≤–∞ send_message, –∞ –Ω–µ 1.
    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –Ω–∞ 2 –≤—ã–∑–æ–≤–∞.
    """
    subject_id = 1
    deadline_name = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
    deadline_type = DeadlineType.PROJECT

    message.text = "24.12.2024"
    finish_add_deadline(message, subject_id, deadline_name, deadline_type)

    mock_add_deadline.assert_called_once_with(
        1,
        "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        DeadlineType.PROJECT,
        "2024-12-24"
    )

    assert mock_send_message.call_count == 2
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç—ã:
    all_texts = [call_args[0][1] for call_args in mock_send_message.call_args_list]
    assert "–î–µ–¥–ª–∞–π–Ω '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω" in all_texts[0]
    # –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç ‚Äî "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤" –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ
    assert "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤" in all_texts[1]


#
# ---------------- –¢–µ—Å—Ç "–ù–∞–∑–∞–¥" (handle_back_to_main_menu) ---------
#

@patch('telebot.TeleBot.send_message')
def test_handle_back_to_main_menu(mock_send_message, message):
    handle_back_to_main_menu(message)

    mock_send_message.assert_called_once()
    _, text = mock_send_message.call_args[0]
    assert "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in text


#
# ----------- –¢–µ—Å—Ç—ã "–£–µ–∑–∂–∞—é –Ω–∞ –∫–∞–Ω–∏–∫—É–ª—ã" (handle_foreign_status) ---
#

@patch('telebot.TeleBot.send_message')
@patch('bot.set_foreign_status')
def test_handle_foreign_status_no(mock_set_foreign, mock_send_message, message):
    message.text = "–Ω–µ—Ç"
    handle_foreign_status(message)

    mock_set_foreign.assert_called_once_with(message.chat.id, is_foreign=False)
    mock_send_message.assert_called_once()
    _, text = mock_send_message.call_args[0]
    assert "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º –¥–ª—è –ø–æ–º–æ—â–∏" in text


@patch('telebot.TeleBot.send_message')
def test_handle_foreign_status_yes(mock_send_message, message):
    message.text = "–¥–∞"
    handle_foreign_status(message)

    mock_send_message.assert_called_once()
    _, text = mock_send_message.call_args[0]
    assert "–ö–æ–≥–¥–∞ –≤—ã –≤–µ—Ä–Ω—ë—Ç–µ—Å—å" in text


#
# ------------------ –¢–µ—Å—Ç—ã save_return_date -------------------------
#

@patch('telebot.TeleBot.send_message')
@patch('bot.set_foreign_status')
def test_save_return_date_correct(mock_set_foreign, mock_send_message, message):
    """
    –í–∞—à –∫–æ–¥, —Å—É–¥—è –ø–æ –ª–æ–≥—É, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –∫–∞–∫ "–°–ø–∞—Å–∏–±–æ! –ñ–¥—ë–º –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è 2025-01-10.".
    –ò—Å–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∏–º–µ–Ω–Ω–æ '2025-01-10'.
    """
    message.text = "10.01.2025"
    save_return_date(message, is_foreign=True)

    mock_set_foreign.assert_called_once()
    call_args = mock_set_foreign.call_args[0]
    kwargs = mock_set_foreign.call_args[1]
    assert call_args[0] == message.chat.id
    assert kwargs["is_foreign"] is True
    # –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 2025-01-10
    assert kwargs["return_date"] == datetime(2025, 1, 10).date()

    mock_send_message.assert_called_once()
    _, text = mock_send_message.call_args[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç '2025-01-10'
    assert "–ñ–¥—ë–º –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è 2025-01-10" in text


@patch('telebot.TeleBot.send_message')
@patch('bot.set_foreign_status')
def test_save_return_date_incorrect(mock_set_foreign, mock_send_message, message):
    message.text = "31-13-2025"
    save_return_date(message, is_foreign=True)

    mock_set_foreign.assert_not_called()
    mock_send_message.assert_called_once()
    _, text = mock_send_message.call_args[0]
    assert "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã" in text




